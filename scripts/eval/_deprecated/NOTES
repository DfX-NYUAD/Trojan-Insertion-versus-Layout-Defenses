
exploitable_regions.tcl
=======================

# extract cell placement; note that physical cells (decaps, fillers, tapcells) are already deleted at this point
# NOTE INTERNAL ONLY: command to ignore physical cells here would be: foreach cell [get_db insts -if { .is_physical == false } ] {
foreach cell [get_db insts] {

check.tcl
=======================

# covers routing issues like dangling wires, floating metals, open pins, etc.; check *.conn.rpt
# NOTE false positives for dangling VDD, VSS at M1
# NOTE INTERNAL ONLY: does NOT flag cells not connected or routed at all -- those are caught by LEC, flagged as "Unreachable" points
check_connectivity -error 100000 -warning 100000 -check_wire_loops
mv *.conn.rpt reports/

# clock propagation
# NOTE no differences in timing values w/ versus w/o these settings, because of 'time_desing -post_route' using the
# clock propagation from SDC files; still kept here just to make sure and be consistent w/ earlier scripts
set_interactive_constraint_modes [all_constraint_modes -active]
reset_propagated_clock [all_clocks]
## NOTE INTERNAL ONLY: probably not needed w/ latency values and clock constraints defined in SDC file
## NOTE INTERNAL ONLY: also errors out for Innovus 21 as follows: ERROR: (TCLCMD-1411): The update_io_latency command cannot be run when a clock is propagated. Check if there is any set_propagated_clock constraint on pin/port.
#update_io_latency -adjust_source_latency -verbose
set_propagated_clock [all_clocks]

## NOTE provides setup, hold, DRV, clock checks all at once; requires simultaneous_setup_hold_mode
report_timing_summary > reports/timing.rpt
##	# NOTE INTERNAL ONLY: explicit separate eval not needed
##	report_timing_summary -checks setup > reports/timing.rpt
##	report_timing_summary -checks hold >> reports/timing.rpt
##	#report_timing_summary -checks drv >> reports/timing.rpt

check.tcl TODO
=======================

## NOTE provides setup, hold, DRV, clock checks all at once; requires simultaneous_setup_hold_mode
report_timing_summary > reports/timing.rpt

####
# SI/noise reporting
####

#update_glitch
# NOTE INTERNAL ONLY: values differ from those obtained in regular flow, as in here less noise and no violations at all are reported
# NOTE INTERNAL ONLY: somewhat more noise, violations are reported for separate timing checks and 'timing_enable_simultaneous_setup_hold_mode false'
# TODO INTERNAL ONLY: try again w/ separate timing checks and timing_enable_simultaneous_setup_hold_mode false, now that set_default_switching_activity is there
# NOTE INTERNAL ONLY: deactivated for now
report_noise -threshold 0.0 > reports/noise.rpt
## NOTE the parameter to be used here is noisy_waveform, not bumpy_waveform
#report_noise -threshold 0 -noisy_waveform >> reports/noise.rpt

# TODO either this here, although update_glitch shouldn't be run after report_timing or update_timing -- which is not
# report_timing_summary
# TODO or report_noise first, and then only report_timing_summary -- see whether timing reports are the same then?
# TODO for the first option, note that this is also recommended flow: timing first, then noise -- but, update_glitch
# not covered

mmmc.tcl TODO
=======================

## library_sets
create_library_set -name TT_library_set \
    -timing {ASAP7/asap7sc7p5t_AO_LVT_TT_ccsa_211120.lib ASAP7/asap7sc7p5t_AO_SLVT_TT_ccsa_211120.lib ASAP7/asap7sc7p5t_INVBUF_LVT_TT_ccsa_220122.lib ASAP7/asap7sc7p5t_INVBUF_SLVT_TT_ccsa_220122.lib ASAP7/asap7sc7p5t_OA_LVT_TT_ccsa_211120.lib ASAP7/asap7sc7p5t_OA_SLVT_TT_ccsa_211120.lib ASAP7/asap7sc7p5t_SEQ_LVT_TT_ccsa_220123.lib ASAP7/asap7sc7p5t_SEQ_SLVT_TT_ccsa_220123.lib ASAP7/asap7sc7p5t_SIMPLE_LVT_TT_ccsa_211120.lib ASAP7/asap7sc7p5t_SIMPLE_SLVT_TT_ccsa_211120.lib}
